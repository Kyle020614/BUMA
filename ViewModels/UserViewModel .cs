
namespace BUMA.ViewModels
{
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;
    using System.Windows;
    using System.Windows.Input;
    using BUMA.Models;

    public class UserViewModel : BaseViewModel
    {
        private ObservableCollection<User> _users;
        public User SelectedUser { get; set; }

        private string _accessLevel;

        private readonly UserService _userService;

        public ICommand LoadUsersCommand { get; }
        public ICommand AddUserCommand { get; }
        public ICommand UpdateUserCommand { get; }
        public ICommand DeleteUserCommand { get; }

        public ObservableCollection<User> Users
        {
            get => _users;
            set
            {
                _users = value;
                OnPropertyChanged();
            }
        }
        public UserViewModel(UserService userService, string accessLevel)
        {
            _userService = userService;
            _accessLevel = accessLevel;

            LoadUsers();

            AddUserCommand = new RelayCommand(AddUser);
            UpdateUserCommand = new RelayCommand(UpdateUser);
            DeleteUserCommand = new RelayCommand(DeleteUser);
        }

        public string AccessLevel
        {
            get => _accessLevel;
            set
            {
                _accessLevel = value;
                OnPropertyChanged();

                OnPropertyChanged(nameof(IsAdmin));
            }
        }

        public bool IsAdmin => AccessLevel == "Admin";
        private void LoadUsers()
        {
            var usersList = _userService.GetAllUsers(); 
            if (Users == null)
            {
                Users = new ObservableCollection<User>(usersList);
            }
            else
            {
                Users.Clear(); 
                foreach (var user in usersList)
                {
                    Users.Add(user); 
                }
            }
        }

        private void AddUser()
        {          
            if (SelectedUser != null)
            {
                if(SelectedUser.UserId != null)
                {
                    MessageBox.Show("You cannot manually insert a User ID. The ID will be auto-generated by the database. Please set it to 0 and try again", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    LoadUsers(); 
                    return;  
                }
                if (string.IsNullOrWhiteSpace(SelectedUser.Username) || string.IsNullOrWhiteSpace(SelectedUser.AccessLevel))
                {
                    MessageBox.Show("Please provide a valid Username and Access Level.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    LoadUsers();
                    return;  
                }

                bool ExistingUser = _userService.ExistingUser(SelectedUser.Username);
                if (ExistingUser == false)
                {
                    _userService.AddUser(SelectedUser);
                    LoadUsers();  
                }
                else
                {
                    MessageBox.Show("Username Already in use.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    LoadUsers();
                    return;

                }               
            }
        }

        private void UpdateUser()
        {
            if (SelectedUser != null)
            {
                if (string.IsNullOrWhiteSpace(SelectedUser.Username) || string.IsNullOrWhiteSpace(SelectedUser.AccessLevel))
                {
                    MessageBox.Show("Please provide a valid Username and Access Level.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    LoadUsers();
                    return; 
                }
                bool ExistingUser = _userService.ExistingUser(SelectedUser.Username);
                if (ExistingUser == false)
                {
                    _userService.UpdateUser(SelectedUser);
                    LoadUsers();  
                }
                else
                {
                    MessageBox.Show("Username Already in use.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    LoadUsers();
                    return;

                }
            }
        }

        private void DeleteUser()
        {
            if (SelectedUser != null)
            {
                _userService.DeleteUser(SelectedUser.UserId);
                LoadUsers();  
            }
        }



        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
